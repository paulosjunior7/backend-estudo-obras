// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Obras.Data;

#nullable disable

namespace Obras.Data.Migrations
{
    [DbContext(typeof(ObrasDBContext))]
    [Migration("20231120233937_AddProviderFieldTypePeopleANDCPF")]
    partial class AddProviderFieldTypePeopleANDCPF
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Obras.Data.Entities.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ChangeDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangeUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RegistrationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ChangeUserId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("RegistrationUserId");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("Obras.Data.Entities.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CellPhone")
                        .HasMaxLength(18)
                        .HasColumnType("nvarchar(18)");

                    b.Property<DateTime?>("ChangeDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasMaxLength(18)
                        .HasColumnType("nvarchar(18)");

                    b.Property<string>("Complement")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CorporateName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EMail")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FantasyName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Neighbourhood")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Number")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("State")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("Telephone")
                        .HasMaxLength(18)
                        .HasColumnType("nvarchar(18)");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("Obras.Data.Entities.Construction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Art")
                        .HasColumnType("int");

                    b.Property<int?>("BatchArea")
                        .HasColumnType("int");

                    b.Property<int?>("BuildingArea")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ChangeDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangeUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Cno")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Complement")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreationDate")
                        .HasMaxLength(11)
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateBegin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnType("datetime2");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<int?>("License")
                        .HasColumnType("int");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<double?>("MotherEnrollment")
                        .HasColumnType("float");

                    b.Property<int?>("MunicipalRegistration")
                        .HasColumnType("int");

                    b.Property<string>("Neighbourhood")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Number")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("RegistrationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double?>("SaleValue")
                        .HasColumnType("float");

                    b.Property<string>("State")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<int>("StatusConstruction")
                        .HasColumnType("int");

                    b.Property<int?>("UndergroundUse")
                        .HasColumnType("int");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("ChangeUserId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("RegistrationUserId");

                    b.ToTable("Constructions");
                });

            modelBuilder.Entity("Obras.Data.Entities.ConstructionAdvanceMoney", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ChangeDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangeUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ConstructionId")
                        .HasColumnType("int");

                    b.Property<int>("ConstructionInvestorId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("RegistrationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ChangeUserId");

                    b.HasIndex("ConstructionId");

                    b.HasIndex("ConstructionInvestorId");

                    b.HasIndex("RegistrationUserId");

                    b.ToTable("ConstructionAdvancesMoney");
                });

            modelBuilder.Entity("Obras.Data.Entities.ConstructionBatch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ChangeDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangeUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ConstructionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<int>("PeopleId")
                        .HasColumnType("int");

                    b.Property<string>("RegistrationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ChangeUserId");

                    b.HasIndex("ConstructionId");

                    b.HasIndex("PeopleId");

                    b.HasIndex("RegistrationUserId");

                    b.ToTable("ConstructionBatchs");
                });

            modelBuilder.Entity("Obras.Data.Entities.ConstructionDocumentation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ChangeDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangeUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ConstructionId")
                        .HasColumnType("int");

                    b.Property<int>("ConstructionInvestorId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("DocumentationId")
                        .HasColumnType("int");

                    b.Property<string>("RegistrationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ChangeUserId");

                    b.HasIndex("ConstructionId");

                    b.HasIndex("ConstructionInvestorId");

                    b.HasIndex("DocumentationId");

                    b.HasIndex("RegistrationUserId");

                    b.ToTable("ConstructionDocumentations");
                });

            modelBuilder.Entity("Obras.Data.Entities.ConstructionExpense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ChangeDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangeUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ConstructionId")
                        .HasColumnType("int");

                    b.Property<int>("ConstructionInvestorId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExpenseId")
                        .HasColumnType("int");

                    b.Property<string>("RegistrationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ChangeUserId");

                    b.HasIndex("ConstructionId");

                    b.HasIndex("ConstructionInvestorId");

                    b.HasIndex("ExpenseId");

                    b.HasIndex("RegistrationUserId");

                    b.ToTable("ConstructionExpenses");
                });

            modelBuilder.Entity("Obras.Data.Entities.ConstructionHouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<double?>("BuildingArea")
                        .HasColumnType("float");

                    b.Property<DateTime?>("ChangeDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangeUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ConstructionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("EnergyConsumptionUnit")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<double?>("FractionBatch")
                        .HasColumnType("float");

                    b.Property<double?>("PermeableArea")
                        .HasColumnType("float");

                    b.Property<string>("Registration")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("RegistrationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double?>("SaleValue")
                        .HasColumnType("float");

                    b.Property<string>("WaterConsumptionUnit")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("ChangeUserId");

                    b.HasIndex("ConstructionId");

                    b.HasIndex("RegistrationUserId");

                    b.ToTable("ConstructionHouses");
                });

            modelBuilder.Entity("Obras.Data.Entities.ConstructionInvestor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ChangeDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangeUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ConstructionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<int>("PeopleId")
                        .HasColumnType("int");

                    b.Property<string>("RegistrationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ChangeUserId");

                    b.HasIndex("ConstructionId");

                    b.HasIndex("PeopleId");

                    b.HasIndex("RegistrationUserId");

                    b.ToTable("ConstructionInvestors");
                });

            modelBuilder.Entity("Obras.Data.Entities.ConstructionManpower", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ChangeDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangeUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ConstructionId")
                        .HasColumnType("int");

                    b.Property<int>("ConstructionInvestorId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("OutsourcedId")
                        .HasColumnType("int");

                    b.Property<string>("RegistrationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ChangeUserId");

                    b.HasIndex("ConstructionId");

                    b.HasIndex("ConstructionInvestorId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("OutsourcedId");

                    b.HasIndex("RegistrationUserId");

                    b.ToTable("ConstructionManpowers");
                });

            modelBuilder.Entity("Obras.Data.Entities.ConstructionMaterial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ChangeDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangeUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ConstructionId")
                        .HasColumnType("int");

                    b.Property<int>("ConstructionInvestorId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.Property<string>("RegistrationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("float");

                    b.Property<int>("UnityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("ChangeUserId");

                    b.HasIndex("ConstructionId");

                    b.HasIndex("ConstructionInvestorId");

                    b.HasIndex("GroupId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProviderId");

                    b.HasIndex("RegistrationUserId");

                    b.HasIndex("UnityId");

                    b.ToTable("ConstructionMaterials");
                });

            modelBuilder.Entity("Obras.Data.Entities.Documentation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ChangeDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangeUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RegistrationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ChangeUserId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("RegistrationUserId");

                    b.ToTable("Documentations");
                });

            modelBuilder.Entity("Obras.Data.Entities.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CellPhone")
                        .HasMaxLength(18)
                        .HasColumnType("nvarchar(18)");

                    b.Property<DateTime?>("ChangeDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangeUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Complement")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<DateTime?>("CreationDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("EMail")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Neighbourhood")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Number")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("RegistrationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ResponsibilityId")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("Telephone")
                        .HasMaxLength(18)
                        .HasColumnType("nvarchar(18)");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("ChangeUserId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("RegistrationUserId");

                    b.HasIndex("ResponsibilityId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Obras.Data.Entities.Expense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ChangeDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangeUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RegistrationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TypeExpense")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChangeUserId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("RegistrationUserId");

                    b.ToTable("Expenses");
                });

            modelBuilder.Entity("Obras.Data.Entities.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ChangeDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangeUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RegistrationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ChangeUserId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("RegistrationUserId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Obras.Data.Entities.Outsourced", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CellPhone")
                        .HasMaxLength(18)
                        .HasColumnType("nvarchar(18)");

                    b.Property<DateTime?>("ChangeDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangeUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Cnpj")
                        .HasMaxLength(18)
                        .HasColumnType("nvarchar(18)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Complement")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CorporateName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Cpf")
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<DateTime?>("CreationDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("EMail")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FantasyName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Neighbourhood")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Number")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("RegistrationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ResponsibilityId")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("Telephone")
                        .HasMaxLength(18)
                        .HasColumnType("nvarchar(18)");

                    b.Property<int>("TypePeople")
                        .HasColumnType("int");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("ChangeUserId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("RegistrationUserId");

                    b.HasIndex("ResponsibilityId");

                    b.ToTable("Outsourseds");
                });

            modelBuilder.Entity("Obras.Data.Entities.People", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CellPhone")
                        .HasMaxLength(18)
                        .HasColumnType("nvarchar(18)");

                    b.Property<DateTime?>("ChangeDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangeUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Client")
                        .HasColumnType("bit");

                    b.Property<string>("Cnpj")
                        .HasMaxLength(18)
                        .HasColumnType("nvarchar(18)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Complement")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Constructor")
                        .HasColumnType("bit");

                    b.Property<string>("CorporateName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Cpf")
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<DateTime?>("CreationDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("EMail")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FantasyName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Investor")
                        .HasColumnType("bit");

                    b.Property<string>("Neighbourhood")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Number")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("RegistrationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("State")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("Telephone")
                        .HasMaxLength(18)
                        .HasColumnType("nvarchar(18)");

                    b.Property<int>("TypePeople")
                        .HasColumnType("int");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("ChangeUserId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("RegistrationUserId");

                    b.ToTable("Peoples");
                });

            modelBuilder.Entity("Obras.Data.Entities.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ChangeDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangeUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ConstrucationId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("RegistrationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TypePhoto")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChangeUserId");

                    b.HasIndex("ConstrucationId");

                    b.HasIndex("RegistrationUserId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("Obras.Data.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ChangeDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangeUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Detail")
                        .HasMaxLength(2147483647)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistrationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ChangeUserId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("RegistrationUserId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Obras.Data.Entities.ProductProvider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("AuxiliaryCode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ChangeDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangeUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreationDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.Property<string>("RegistrationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ChangeUserId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProviderId");

                    b.HasIndex("RegistrationUserId");

                    b.ToTable("ProductProviders");
                });

            modelBuilder.Entity("Obras.Data.Entities.Provider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CellPhone")
                        .HasMaxLength(18)
                        .HasColumnType("nvarchar(18)");

                    b.Property<DateTime?>("ChangeDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangeUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasMaxLength(18)
                        .HasColumnType("nvarchar(18)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Complement")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Cpf")
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<DateTime?>("CreationDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("EMail")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Neighbourhood")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Number")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("RegistrationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("State")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("Telephone")
                        .HasMaxLength(18)
                        .HasColumnType("nvarchar(18)");

                    b.Property<int>("TypePeople")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(74);

                    b.Property<string>("ZipCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("ChangeUserId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("RegistrationUserId");

                    b.ToTable("Providers");
                });

            modelBuilder.Entity("Obras.Data.Entities.Responsibility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ChangeDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangeUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RegistrationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ChangeUserId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("RegistrationUserId");

                    b.ToTable("Responsibilities");
                });

            modelBuilder.Entity("Obras.Data.Entities.Unity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ChangeDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangeUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("Multiplier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(1.0);

                    b.Property<string>("RegistrationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ChangeUserId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("RegistrationUserId");

                    b.ToTable("Unities");
                });

            modelBuilder.Entity("Obras.Data.Entities.User", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.HasIndex("CompanyId");

                    b.HasDiscriminator().HasValue("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Obras.Data.Entities.Brand", b =>
                {
                    b.HasOne("Obras.Data.Entities.User", "ChangeUser")
                        .WithMany("ChangeBrands")
                        .HasForeignKey("ChangeUserId");

                    b.HasOne("Obras.Data.Entities.Company", "Company")
                        .WithMany("Brands")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Obras.Data.Entities.User", "RegistrationUser")
                        .WithMany("RegistrationBrands")
                        .HasForeignKey("RegistrationUserId");

                    b.Navigation("ChangeUser");

                    b.Navigation("Company");

                    b.Navigation("RegistrationUser");
                });

            modelBuilder.Entity("Obras.Data.Entities.Construction", b =>
                {
                    b.HasOne("Obras.Data.Entities.User", "ChangeUser")
                        .WithMany("ChangeConstructions")
                        .HasForeignKey("ChangeUserId");

                    b.HasOne("Obras.Data.Entities.Company", "Company")
                        .WithMany("Constructions")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Obras.Data.Entities.User", "RegistrationUser")
                        .WithMany("RegistrationConstructions")
                        .HasForeignKey("RegistrationUserId");

                    b.Navigation("ChangeUser");

                    b.Navigation("Company");

                    b.Navigation("RegistrationUser");
                });

            modelBuilder.Entity("Obras.Data.Entities.ConstructionAdvanceMoney", b =>
                {
                    b.HasOne("Obras.Data.Entities.User", "ChangeUser")
                        .WithMany("ChangeConstructionAdvanceMoneys")
                        .HasForeignKey("ChangeUserId");

                    b.HasOne("Obras.Data.Entities.Construction", "Construction")
                        .WithMany("ConstructionAdvanceMoneys")
                        .HasForeignKey("ConstructionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Obras.Data.Entities.ConstructionInvestor", "ConstructionInvestor")
                        .WithMany("ConstructionAdvanceMoneys")
                        .HasForeignKey("ConstructionInvestorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Obras.Data.Entities.User", "RegistrationUser")
                        .WithMany("RegistrationConstructionAdvanceMoneys")
                        .HasForeignKey("RegistrationUserId");

                    b.Navigation("ChangeUser");

                    b.Navigation("Construction");

                    b.Navigation("ConstructionInvestor");

                    b.Navigation("RegistrationUser");
                });

            modelBuilder.Entity("Obras.Data.Entities.ConstructionBatch", b =>
                {
                    b.HasOne("Obras.Data.Entities.User", "ChangeUser")
                        .WithMany("ChangeConstructionBatchs")
                        .HasForeignKey("ChangeUserId");

                    b.HasOne("Obras.Data.Entities.Construction", "Construction")
                        .WithMany("ConstructionBatchs")
                        .HasForeignKey("ConstructionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Obras.Data.Entities.People", "People")
                        .WithMany("ConstructionBatchs")
                        .HasForeignKey("PeopleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Obras.Data.Entities.User", "RegistrationUser")
                        .WithMany("RegistrationConstructionBatchs")
                        .HasForeignKey("RegistrationUserId");

                    b.Navigation("ChangeUser");

                    b.Navigation("Construction");

                    b.Navigation("People");

                    b.Navigation("RegistrationUser");
                });

            modelBuilder.Entity("Obras.Data.Entities.ConstructionDocumentation", b =>
                {
                    b.HasOne("Obras.Data.Entities.User", "ChangeUser")
                        .WithMany("ChangeConstructionDocumentations")
                        .HasForeignKey("ChangeUserId");

                    b.HasOne("Obras.Data.Entities.Construction", "Construction")
                        .WithMany("ConstructionDocumentations")
                        .HasForeignKey("ConstructionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Obras.Data.Entities.ConstructionInvestor", "ConstructionInvestor")
                        .WithMany("ConstructionDocumentations")
                        .HasForeignKey("ConstructionInvestorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Obras.Data.Entities.Documentation", "Documentation")
                        .WithMany("ConstructionDocumentations")
                        .HasForeignKey("DocumentationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Obras.Data.Entities.User", "RegistrationUser")
                        .WithMany("RegistrationConstructionDocumentations")
                        .HasForeignKey("RegistrationUserId");

                    b.Navigation("ChangeUser");

                    b.Navigation("Construction");

                    b.Navigation("ConstructionInvestor");

                    b.Navigation("Documentation");

                    b.Navigation("RegistrationUser");
                });

            modelBuilder.Entity("Obras.Data.Entities.ConstructionExpense", b =>
                {
                    b.HasOne("Obras.Data.Entities.User", "ChangeUser")
                        .WithMany("ChangeConstructionExpenses")
                        .HasForeignKey("ChangeUserId");

                    b.HasOne("Obras.Data.Entities.Construction", "Construction")
                        .WithMany("ConstructionExpenses")
                        .HasForeignKey("ConstructionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Obras.Data.Entities.ConstructionInvestor", "ConstructionInvestor")
                        .WithMany("ConstructionExpenses")
                        .HasForeignKey("ConstructionInvestorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Obras.Data.Entities.Expense", "Expense")
                        .WithMany("ConstructionExpenses")
                        .HasForeignKey("ExpenseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Obras.Data.Entities.User", "RegistrationUser")
                        .WithMany("RegistrationConstructionExpenses")
                        .HasForeignKey("RegistrationUserId");

                    b.Navigation("ChangeUser");

                    b.Navigation("Construction");

                    b.Navigation("ConstructionInvestor");

                    b.Navigation("Expense");

                    b.Navigation("RegistrationUser");
                });

            modelBuilder.Entity("Obras.Data.Entities.ConstructionHouse", b =>
                {
                    b.HasOne("Obras.Data.Entities.User", "ChangeUser")
                        .WithMany("ChangeConstructionHouses")
                        .HasForeignKey("ChangeUserId");

                    b.HasOne("Obras.Data.Entities.Construction", "Construction")
                        .WithMany("ConstructionHouses")
                        .HasForeignKey("ConstructionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Obras.Data.Entities.User", "RegistrationUser")
                        .WithMany("RegistrationConstructionHouses")
                        .HasForeignKey("RegistrationUserId");

                    b.Navigation("ChangeUser");

                    b.Navigation("Construction");

                    b.Navigation("RegistrationUser");
                });

            modelBuilder.Entity("Obras.Data.Entities.ConstructionInvestor", b =>
                {
                    b.HasOne("Obras.Data.Entities.User", "ChangeUser")
                        .WithMany("ChangeConstructionInvestors")
                        .HasForeignKey("ChangeUserId");

                    b.HasOne("Obras.Data.Entities.Construction", "Construction")
                        .WithMany("ConstructionInvestors")
                        .HasForeignKey("ConstructionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Obras.Data.Entities.People", "People")
                        .WithMany("ConstructionInvestors")
                        .HasForeignKey("PeopleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Obras.Data.Entities.User", "RegistrationUser")
                        .WithMany("RegistrationConstructionInvestors")
                        .HasForeignKey("RegistrationUserId");

                    b.Navigation("ChangeUser");

                    b.Navigation("Construction");

                    b.Navigation("People");

                    b.Navigation("RegistrationUser");
                });

            modelBuilder.Entity("Obras.Data.Entities.ConstructionManpower", b =>
                {
                    b.HasOne("Obras.Data.Entities.User", "ChangeUser")
                        .WithMany("ChangeConstructionManpowers")
                        .HasForeignKey("ChangeUserId");

                    b.HasOne("Obras.Data.Entities.Construction", "Construction")
                        .WithMany("ConstructionManpowers")
                        .HasForeignKey("ConstructionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Obras.Data.Entities.ConstructionInvestor", "ConstructionInvestor")
                        .WithMany()
                        .HasForeignKey("ConstructionInvestorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Obras.Data.Entities.Employee", "Employee")
                        .WithMany("ConstructionManpowers")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Obras.Data.Entities.Outsourced", "Outsourced")
                        .WithMany("ConstructionManpowers")
                        .HasForeignKey("OutsourcedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Obras.Data.Entities.User", "RegistrationUser")
                        .WithMany("RegistrationConstructionManpowers")
                        .HasForeignKey("RegistrationUserId");

                    b.Navigation("ChangeUser");

                    b.Navigation("Construction");

                    b.Navigation("ConstructionInvestor");

                    b.Navigation("Employee");

                    b.Navigation("Outsourced");

                    b.Navigation("RegistrationUser");
                });

            modelBuilder.Entity("Obras.Data.Entities.ConstructionMaterial", b =>
                {
                    b.HasOne("Obras.Data.Entities.Brand", "Brand")
                        .WithMany("ConstructionMaterials")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Obras.Data.Entities.User", "ChangeUser")
                        .WithMany("ChangeConstructionMaterials")
                        .HasForeignKey("ChangeUserId");

                    b.HasOne("Obras.Data.Entities.Construction", "Construction")
                        .WithMany("ConstructionMaterials")
                        .HasForeignKey("ConstructionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Obras.Data.Entities.ConstructionInvestor", "ConstructionInvestor")
                        .WithMany("ConstructionMaterials")
                        .HasForeignKey("ConstructionInvestorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Obras.Data.Entities.Group", "Group")
                        .WithMany("ConstructionMaterials")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Obras.Data.Entities.Product", "Product")
                        .WithMany("ConstructionMaterials")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Obras.Data.Entities.Provider", "Provider")
                        .WithMany("ConstructionMaterials")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Obras.Data.Entities.User", "RegistrationUser")
                        .WithMany("RegistrationConstructionMaterials")
                        .HasForeignKey("RegistrationUserId");

                    b.HasOne("Obras.Data.Entities.Unity", "Unity")
                        .WithMany("ConstructionMaterials")
                        .HasForeignKey("UnityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("ChangeUser");

                    b.Navigation("Construction");

                    b.Navigation("ConstructionInvestor");

                    b.Navigation("Group");

                    b.Navigation("Product");

                    b.Navigation("Provider");

                    b.Navigation("RegistrationUser");

                    b.Navigation("Unity");
                });

            modelBuilder.Entity("Obras.Data.Entities.Documentation", b =>
                {
                    b.HasOne("Obras.Data.Entities.User", "ChangeUser")
                        .WithMany("ChangeDocumentations")
                        .HasForeignKey("ChangeUserId");

                    b.HasOne("Obras.Data.Entities.Company", "Company")
                        .WithMany("Documentations")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Obras.Data.Entities.User", "RegistrationUser")
                        .WithMany("RegistrationDocumentations")
                        .HasForeignKey("RegistrationUserId");

                    b.Navigation("ChangeUser");

                    b.Navigation("Company");

                    b.Navigation("RegistrationUser");
                });

            modelBuilder.Entity("Obras.Data.Entities.Employee", b =>
                {
                    b.HasOne("Obras.Data.Entities.User", "ChangeUser")
                        .WithMany("ChangeEmployees")
                        .HasForeignKey("ChangeUserId");

                    b.HasOne("Obras.Data.Entities.Company", "Company")
                        .WithMany("Employees")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Obras.Data.Entities.User", "RegistrationUser")
                        .WithMany("RegistrationEmployees")
                        .HasForeignKey("RegistrationUserId");

                    b.HasOne("Obras.Data.Entities.Responsibility", "Responsibility")
                        .WithMany("Employees")
                        .HasForeignKey("ResponsibilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChangeUser");

                    b.Navigation("Company");

                    b.Navigation("RegistrationUser");

                    b.Navigation("Responsibility");
                });

            modelBuilder.Entity("Obras.Data.Entities.Expense", b =>
                {
                    b.HasOne("Obras.Data.Entities.User", "ChangeUser")
                        .WithMany("ChangeExpenses")
                        .HasForeignKey("ChangeUserId");

                    b.HasOne("Obras.Data.Entities.Company", "Company")
                        .WithMany("Expenses")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Obras.Data.Entities.User", "RegistrationUser")
                        .WithMany("RegistrationExpenses")
                        .HasForeignKey("RegistrationUserId");

                    b.Navigation("ChangeUser");

                    b.Navigation("Company");

                    b.Navigation("RegistrationUser");
                });

            modelBuilder.Entity("Obras.Data.Entities.Group", b =>
                {
                    b.HasOne("Obras.Data.Entities.User", "ChangeUser")
                        .WithMany("ChangeGroups")
                        .HasForeignKey("ChangeUserId");

                    b.HasOne("Obras.Data.Entities.Company", "Company")
                        .WithMany("Groups")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Obras.Data.Entities.User", "RegistrationUser")
                        .WithMany("RegistrationGroups")
                        .HasForeignKey("RegistrationUserId");

                    b.Navigation("ChangeUser");

                    b.Navigation("Company");

                    b.Navigation("RegistrationUser");
                });

            modelBuilder.Entity("Obras.Data.Entities.Outsourced", b =>
                {
                    b.HasOne("Obras.Data.Entities.User", "ChangeUser")
                        .WithMany("ChangeOutsourceds")
                        .HasForeignKey("ChangeUserId");

                    b.HasOne("Obras.Data.Entities.Company", "Company")
                        .WithMany("Outsourceds")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Obras.Data.Entities.User", "RegistrationUser")
                        .WithMany("RegistrationOutsourceds")
                        .HasForeignKey("RegistrationUserId");

                    b.HasOne("Obras.Data.Entities.Responsibility", "Responsibility")
                        .WithMany("Outsourceds")
                        .HasForeignKey("ResponsibilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChangeUser");

                    b.Navigation("Company");

                    b.Navigation("RegistrationUser");

                    b.Navigation("Responsibility");
                });

            modelBuilder.Entity("Obras.Data.Entities.People", b =>
                {
                    b.HasOne("Obras.Data.Entities.User", "ChangeUser")
                        .WithMany("ChangePeoples")
                        .HasForeignKey("ChangeUserId");

                    b.HasOne("Obras.Data.Entities.Company", "Company")
                        .WithMany("Peoples")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Obras.Data.Entities.User", "RegistrationUser")
                        .WithMany("RegistrationPeoples")
                        .HasForeignKey("RegistrationUserId");

                    b.Navigation("ChangeUser");

                    b.Navigation("Company");

                    b.Navigation("RegistrationUser");
                });

            modelBuilder.Entity("Obras.Data.Entities.Photo", b =>
                {
                    b.HasOne("Obras.Data.Entities.User", "ChangeUser")
                        .WithMany("ChangePhotos")
                        .HasForeignKey("ChangeUserId");

                    b.HasOne("Obras.Data.Entities.Construction", "Construction")
                        .WithMany("Photos")
                        .HasForeignKey("ConstrucationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Obras.Data.Entities.User", "RegistrationUser")
                        .WithMany("RegistrationPhotos")
                        .HasForeignKey("RegistrationUserId");

                    b.Navigation("ChangeUser");

                    b.Navigation("Construction");

                    b.Navigation("RegistrationUser");
                });

            modelBuilder.Entity("Obras.Data.Entities.Product", b =>
                {
                    b.HasOne("Obras.Data.Entities.User", "ChangeUser")
                        .WithMany("ChangeProducts")
                        .HasForeignKey("ChangeUserId");

                    b.HasOne("Obras.Data.Entities.Company", "Company")
                        .WithMany("Products")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Obras.Data.Entities.User", "RegistrationUser")
                        .WithMany("RegistrationProducts")
                        .HasForeignKey("RegistrationUserId");

                    b.Navigation("ChangeUser");

                    b.Navigation("Company");

                    b.Navigation("RegistrationUser");
                });

            modelBuilder.Entity("Obras.Data.Entities.ProductProvider", b =>
                {
                    b.HasOne("Obras.Data.Entities.User", "ChangeUser")
                        .WithMany("ChangeProductProviders")
                        .HasForeignKey("ChangeUserId");

                    b.HasOne("Obras.Data.Entities.Product", "Product")
                        .WithMany("ProductProviders")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Obras.Data.Entities.Provider", "Provider")
                        .WithMany("ProductProviders")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Obras.Data.Entities.User", "RegistrationUser")
                        .WithMany("RegistrationProductProviders")
                        .HasForeignKey("RegistrationUserId");

                    b.Navigation("ChangeUser");

                    b.Navigation("Product");

                    b.Navigation("Provider");

                    b.Navigation("RegistrationUser");
                });

            modelBuilder.Entity("Obras.Data.Entities.Provider", b =>
                {
                    b.HasOne("Obras.Data.Entities.User", "ChangeUser")
                        .WithMany("ChangeProviders")
                        .HasForeignKey("ChangeUserId");

                    b.HasOne("Obras.Data.Entities.Company", "Company")
                        .WithMany("Providers")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Obras.Data.Entities.User", "RegistrationUser")
                        .WithMany("RegistrationProviders")
                        .HasForeignKey("RegistrationUserId");

                    b.Navigation("ChangeUser");

                    b.Navigation("Company");

                    b.Navigation("RegistrationUser");
                });

            modelBuilder.Entity("Obras.Data.Entities.Responsibility", b =>
                {
                    b.HasOne("Obras.Data.Entities.User", "ChangeUser")
                        .WithMany("ChangeResponsibilities")
                        .HasForeignKey("ChangeUserId");

                    b.HasOne("Obras.Data.Entities.Company", "Company")
                        .WithMany("Responsibilities")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Obras.Data.Entities.User", "RegistrationUser")
                        .WithMany("RegistrationResponsibilities")
                        .HasForeignKey("RegistrationUserId");

                    b.Navigation("ChangeUser");

                    b.Navigation("Company");

                    b.Navigation("RegistrationUser");
                });

            modelBuilder.Entity("Obras.Data.Entities.Unity", b =>
                {
                    b.HasOne("Obras.Data.Entities.User", "ChangeUser")
                        .WithMany("ChangeUnities")
                        .HasForeignKey("ChangeUserId");

                    b.HasOne("Obras.Data.Entities.Company", "Company")
                        .WithMany("Unities")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Obras.Data.Entities.User", "RegistrationUser")
                        .WithMany("RegistrationUnities")
                        .HasForeignKey("RegistrationUserId");

                    b.Navigation("ChangeUser");

                    b.Navigation("Company");

                    b.Navigation("RegistrationUser");
                });

            modelBuilder.Entity("Obras.Data.Entities.User", b =>
                {
                    b.HasOne("Obras.Data.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Obras.Data.Entities.Brand", b =>
                {
                    b.Navigation("ConstructionMaterials");
                });

            modelBuilder.Entity("Obras.Data.Entities.Company", b =>
                {
                    b.Navigation("Brands");

                    b.Navigation("Constructions");

                    b.Navigation("Documentations");

                    b.Navigation("Employees");

                    b.Navigation("Expenses");

                    b.Navigation("Groups");

                    b.Navigation("Outsourceds");

                    b.Navigation("Peoples");

                    b.Navigation("Products");

                    b.Navigation("Providers");

                    b.Navigation("Responsibilities");

                    b.Navigation("Unities");
                });

            modelBuilder.Entity("Obras.Data.Entities.Construction", b =>
                {
                    b.Navigation("ConstructionAdvanceMoneys");

                    b.Navigation("ConstructionBatchs");

                    b.Navigation("ConstructionDocumentations");

                    b.Navigation("ConstructionExpenses");

                    b.Navigation("ConstructionHouses");

                    b.Navigation("ConstructionInvestors");

                    b.Navigation("ConstructionManpowers");

                    b.Navigation("ConstructionMaterials");

                    b.Navigation("Photos");
                });

            modelBuilder.Entity("Obras.Data.Entities.ConstructionInvestor", b =>
                {
                    b.Navigation("ConstructionAdvanceMoneys");

                    b.Navigation("ConstructionDocumentations");

                    b.Navigation("ConstructionExpenses");

                    b.Navigation("ConstructionMaterials");
                });

            modelBuilder.Entity("Obras.Data.Entities.Documentation", b =>
                {
                    b.Navigation("ConstructionDocumentations");
                });

            modelBuilder.Entity("Obras.Data.Entities.Employee", b =>
                {
                    b.Navigation("ConstructionManpowers");
                });

            modelBuilder.Entity("Obras.Data.Entities.Expense", b =>
                {
                    b.Navigation("ConstructionExpenses");
                });

            modelBuilder.Entity("Obras.Data.Entities.Group", b =>
                {
                    b.Navigation("ConstructionMaterials");
                });

            modelBuilder.Entity("Obras.Data.Entities.Outsourced", b =>
                {
                    b.Navigation("ConstructionManpowers");
                });

            modelBuilder.Entity("Obras.Data.Entities.People", b =>
                {
                    b.Navigation("ConstructionBatchs");

                    b.Navigation("ConstructionInvestors");
                });

            modelBuilder.Entity("Obras.Data.Entities.Product", b =>
                {
                    b.Navigation("ConstructionMaterials");

                    b.Navigation("ProductProviders");
                });

            modelBuilder.Entity("Obras.Data.Entities.Provider", b =>
                {
                    b.Navigation("ConstructionMaterials");

                    b.Navigation("ProductProviders");
                });

            modelBuilder.Entity("Obras.Data.Entities.Responsibility", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("Outsourceds");
                });

            modelBuilder.Entity("Obras.Data.Entities.Unity", b =>
                {
                    b.Navigation("ConstructionMaterials");
                });

            modelBuilder.Entity("Obras.Data.Entities.User", b =>
                {
                    b.Navigation("ChangeBrands");

                    b.Navigation("ChangeConstructionAdvanceMoneys");

                    b.Navigation("ChangeConstructionBatchs");

                    b.Navigation("ChangeConstructionDocumentations");

                    b.Navigation("ChangeConstructionExpenses");

                    b.Navigation("ChangeConstructionHouses");

                    b.Navigation("ChangeConstructionInvestors");

                    b.Navigation("ChangeConstructionManpowers");

                    b.Navigation("ChangeConstructionMaterials");

                    b.Navigation("ChangeConstructions");

                    b.Navigation("ChangeDocumentations");

                    b.Navigation("ChangeEmployees");

                    b.Navigation("ChangeExpenses");

                    b.Navigation("ChangeGroups");

                    b.Navigation("ChangeOutsourceds");

                    b.Navigation("ChangePeoples");

                    b.Navigation("ChangePhotos");

                    b.Navigation("ChangeProductProviders");

                    b.Navigation("ChangeProducts");

                    b.Navigation("ChangeProviders");

                    b.Navigation("ChangeResponsibilities");

                    b.Navigation("ChangeUnities");

                    b.Navigation("RegistrationBrands");

                    b.Navigation("RegistrationConstructionAdvanceMoneys");

                    b.Navigation("RegistrationConstructionBatchs");

                    b.Navigation("RegistrationConstructionDocumentations");

                    b.Navigation("RegistrationConstructionExpenses");

                    b.Navigation("RegistrationConstructionHouses");

                    b.Navigation("RegistrationConstructionInvestors");

                    b.Navigation("RegistrationConstructionManpowers");

                    b.Navigation("RegistrationConstructionMaterials");

                    b.Navigation("RegistrationConstructions");

                    b.Navigation("RegistrationDocumentations");

                    b.Navigation("RegistrationEmployees");

                    b.Navigation("RegistrationExpenses");

                    b.Navigation("RegistrationGroups");

                    b.Navigation("RegistrationOutsourceds");

                    b.Navigation("RegistrationPeoples");

                    b.Navigation("RegistrationPhotos");

                    b.Navigation("RegistrationProductProviders");

                    b.Navigation("RegistrationProducts");

                    b.Navigation("RegistrationProviders");

                    b.Navigation("RegistrationResponsibilities");

                    b.Navigation("RegistrationUnities");
                });
#pragma warning restore 612, 618
        }
    }
}
